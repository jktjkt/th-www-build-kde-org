# Sample configuration file for kdesrc-build.
#
# To use this sample configuration file, copy it to ~/.kdesrc-buildrc, and then
# edit it to suit your desires.

# Global settings go in this section.  They apply to every module unless
# overridden later.
global
    colorful-output false
    use-clean-install true
# This is the directory that your KDE sources are downloaded to.  This
# directory also holds the build and log directories by default.
	source-dir /srv/source

# This is the directory that KDE will end up installed at.  The default is
# appropriate for a single-user installation of KDE, which requires no root
# permissions.  If you'd like, you can install and use the sudo program to
# install KDE anywhere on your system, in conjunction with the
# make-install-prefix option.
	kdedir /srv/install/deps/master
#	kdedir /opt/kde
#
# You can overwrite the installation directory for a given module using
# the per-module "prefix" option. Note that when doing this you need to
# set KDEDIRS, PATH and LD_LIBRARY_PATH to point to both directories,
# and that you should use separate test users or KDEHOME values to separate
# the ksycoca databases. Only set prefix if you know what you're doing.

# This is the Qt installation to use to build KDE.  The default is qt-copy
# from Subversion.  Qt will be installed to this directory, so it is
# recommended to use something like ~/qt-4.
# KDE /trunk requires a very recent Qt so qt-copy is the best route if you're
# building /trunk.  If you are building an older branch you may use your
# system installed Qt by setting qtdir to point to it (what qmake -v
# reports with the /lib removed).
	qtdir /srv/install/qt/master  # Default to installing Qt

# By default (if the above is commented out), you are getting trunk.
# If instead you want to check out another branch, like 4.4, use
#	branch 4.5
#
# but also see the qt-copy and kdesupport modules below, which have special
# requirements

# To use a single git repository to download multiple KDE source modules, you
# can define a "base repository", which you can use later with a "module-set"
# grouping and the "use-modules" option. This sets up the "kde-projects" git
# repository, you can change the URL if you are a developer.
#	git-repository-base kde-projects git://anongit.kde.org/
	git-repository-base kde-projects git://git.kde.org:

# This is the Subversion server to download the rest of the KDE sources from.  Developers:
# Don't forget to add your username to the URL if necessary!
	svn-server svn://anonsvn.kde.org/home/kde

# cmake-options controls the compilation options for building KDE 4 modules.
# These options apply to all KDE modules unless otherwise specified.
# NOTE: If you want the cxxflags option below to work (advanced users only)
# then make sure to set the "-DCMAKE_BUILD_TYPE=none" here, or in the specific
# module's cmake-options
#
# Also see http://techbase.kde.org/Development/Tutorials/CMake#Command_Line_Variables
#	cmake-options -DKDE4_BUILD_TESTS:BOOL=ON
#	cmake-options -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_CXX_LINK_EXECUTABLE=ld.gold -DCMAKE_C_LINK_EXECUTABLE=ld.gold -DCMAKE_LINKER=ld.gold
	cmake-options -DCMAKE_BUILD_TYPE=DebugFull

# These are the default options passed to the make command.  The default tries
# to build with 2 parallel compiles.  If you are using distcc or have SMP, you
# should experiment with setting this value higher for best performance.
	make-options -j2

# KDE has one of the most extensive translation packages in the world.  They
# are stored in the l10n module.  kdesrc-build can automatically try to build
# and install languages for you, using this parameter.  It should be a list
# of languages to build and install.  This option requires the language code
# as present in l10n.  You can look these codes up at
# http://i18n.kde.org/teams/
#	kde-languages de        # German
#	kde-languages fr        # French
#	kde-languages en_GB cs  # British English and Czech

# If you would like install KDE to the system (DO NOT INSTALL *over* a prior
# installation!), then you'll probably need to use sudo to install everything.
#
# The -S parameter causes sudo to read from standard input (which is redirected
# by kdesrc-build).  This means that if sudo has to ask for your password, it
# will fail, you need to configure sudo to be able to run "make install"
# without requesting a password.
#
# In addition, you can run kdesrc-build --no-install, and then
# sudo kdesrc-build --install if you are unable to configure sudo to allow
# make install with no password.
#	 make-install-prefix sudo -S

# purge-old-logs controls whether old log files should be removed after the
# latest build finishes. Set to true to enable it.
	 purge-old-logs true

# binpath controls the value of the PATH environment variable during
# compilation.  If you have unusual tools that need to be in the path to build
# KDE, add them here.  KDE's and Qt's programs are automatically added.
# If you leave this option blank, it will default to the PATH that kdesrc-build had
# when it was started.
#	binpath /bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin
#	binpath /usr/lib/ccache/bin:/bin:/usr/bin:/usr/local/bin:/usr/X11R6/bin

# This directory is where everything gets built before it is installed.  By
# default it is relative to the value for source-dir.  You can specify an
# absolute path if you'd like (begin the path with a slash).
	build-dir /srv/build

# These are the compilation flags to use by default when compiling KDE.
# gcc supports a -march option in order to generate specific code for pentium4, athlon-xp,
# etc.  See the gcc man page for more information.
#
# NOTE: For KDE 4 these flags are only applied if you set the CMAKE_BUILD_TYPE setting
# to "none" (see the cmake-options setting)
#	cxxflags -pipe -march=native # Don't use native with distributed build

# You can use the set-env option to add values to the build environment.
#	set-env LDFLAGS -Wl,-O1   # Optimize the linker, takes longer.

# If you use software which requires pkg-config, and you need to add entries
# to your pkg-config path, you can also use set-env for that.  Some broken
# systems require you to set this to find e.g. glib.
#	set-env PKG_CONFIG_PATH /opt/gnome/lib/pkgconfig
email-address nyblom@kde.org
end global

# qt-copy is a copy of Nokia's Qt, optionally with some bugfixes and
# optimizations added.  It is the easiest way to get Qt if you don't already
# have it (and you don't want to use your distro's tools to install it.)
#
# Note that this module uses the "git" source control tool instead of
# Subversion, so read carefully the comments below. ;)
module qt-copy
# Configure flags. See README.kde-qt for the official recommended ones, which
# may become inconsistent with these sample flags.
# Do not specify -prefix, kdesrc-build will handle that.
#
# Phonon note:
# - If you compile phonon separately, make sure to pass -no-phonon.
# - Alternatively, if you use Qt's phonon, remove "phonon" from the use-modules
#   option in the module-set below.
# - As of KDE 4.6/Qt 4.7 the "right answer" is the first option: separate phonon.
	configure-flags -fast -debug -no-separate-debug-info -v \
	                -system-zlib -system-libpng -system-libjpeg \
	                -dbus -webkit -plugin-sql-mysql \
	                -nomake examples -nomake demos \
	                -no-phonon # See module-set below

	make-options -j5
#
#	Default Qt repository -- Use this if you want Nokia's official Qt
#	without any KDE fixes or extensions.
#	repository git://gitorious.org/qt/qt.git
#
#	KDE's (slightly) modified Qt repository.  This includes various
#	optimizations and bugfixes and is generally what KDE developers use.
#	This is recommended in most cases.  If you used to use the old
#	"apply-patches" option, this is the git equivalent.
    repository git://git.kde.org/qt

# If you use the branch option up in the "global" section to set a
# default KDE version, you should manually choose a branch here for Qt.
# You can see the available branches by looking first on gitorious.org,
# or by using "git branch -r" from the qt-copy source directory.
#
# The "master" branch is the best choice for both kde-qt and official Qt if
# you have no preference.
	branch 4.8
#    branch 4.7-stable
#    manual-update true
end module

# Next is shown a "module-set", which is a grouping of modules that has special
# handling of the "repository" option (the module name is automatically added
# to the end for every module defined in this set), and accepts the special
# use-modules option to determine what modules are included in the group.
# Any other options included as defined for every module in the set.
# For every single module passed, kdesrc-build will create the appropriate
# "module" option, with the right repository setting (base + module name).
#
# If you need to set more options for only individual modules, you can add a
# module <name> ... end module as normal after the module-set, but keep in mind
# if you do this that you won't change the order the modules are built in.
#
# Example:
module-set
    # automoc is essential for building KDE's CMake-based modules, and so should be first
    # in this module set (but after Qt, if you're using qt-copy)
    # Phonon is the KDE multimedia layer, which is occasionally synced to Qt.
    use-modules automoc cagibi attica soprano polkit-qt-1 phonon

    # Special handling occurs with this option when used in module-set so you don't
    # have to re-type repository names.
    repository kde-projects

    # Other options are simply passed to each defined module. For example if you
    # uncomment the next line, then the "Debug" build type will be used for every
    # module in this set, which makes modules optimized but still debuggable.
    # cmake-options -DCMAKE_BUILD_TYPE=Debug
end module-set

# This set includes the modules required for the "strigi" file analyzer, used to extract
# information contained in various file types for Dolphin previews, Nepomuk tagging, etc.
# Because of the way the strigi git module is setup, CMake *must* be run in order to
# complete the source code update. This is handled by the "reconfigure" option. In addition,
# a special option to CMake is required to get the strigi build system to complete the
# update.
module-set
    use-modules strigi
    cmake-options -DSTRIGI_SYNC_SUBMODULES=TRUE
#    reconfigure true # CMake needs to always be run to finish the update.
    repository kde-projects
end module-set

# kdesupport contains taglib and QCA, and the Strigi library required for
# kdelibs in KDE 4.  taglib is required for JuK, amarok, and the meta info
# reader for music files in Konqueror.
module kdesupport
# To get the necessary kdesupport stuff for KDE-4.5, use:
#	tag kdesupport-for-4.5/kdesupport

#	Note: -DWITH_ASF=TRUE and -DWITH_MP4=TRUE (for taglib) is required to allow Amarok
#	(defined below, near the end of this file) to build.
	cmake-options -DWITH_ASF=TRUE -DWITH_MP4=TRUE
end module

# Support for notification area menus via the DBusMenu protocol
# This is needed by kdelibs.
module dbusmenu-git
    repository git://gitorious.org/dbusmenu/dbusmenu-qt.git
end module

#module-set
#    repository kde-projects
#    use-modules akonadi
#end module-set
module shared-desktop-ontologies
    repository git://oscaf.git.sourceforge.net/gitroot/oscaf/shared-desktop-ontologies
end module
