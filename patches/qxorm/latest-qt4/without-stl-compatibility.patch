diff --git include/QxCommon/QxStringCvt_Impl.h include/QxCommon/QxStringCvt_Impl.h
index 5050b6a..7098de6 100644
--- include/QxCommon/QxStringCvt_Impl.h
+++ include/QxCommon/QxStringCvt_Impl.h
@@ -100,7 +100,7 @@ struct QxStringCvtGeneric
       Q_UNUSED(format); Q_UNUSED(index); std::string s;
       try { s = boost::lexical_cast<std::string>(t); }
       catch (...) { qDebug("[QxOrm] %s", "'QxStringCvtGeneric::toString()' unknown error calling 'boost::lexical_cast<std::string>()'"); s = ""; }
-      return QString::fromStdString(s);
+      return QString::fromAscii(s.data(), s.size());
    }
 
    static inline qx_bool fromString(const QString & s, T & t, const QString & format, int index)
diff --git include/QxTraits/archive_wide_traits.h include/QxTraits/archive_wide_traits.h
index 38f82a3..48ce3d5 100644
--- include/QxTraits/archive_wide_traits.h
+++ include/QxTraits/archive_wide_traits.h
@@ -112,15 +112,15 @@ private:
    template <bool isWide /* = false */, int dummy>
    struct cvtQString
    {
-      static inline QString toQString(const std::string & str)                   { return QString::fromStdString(str); }
-      static inline void fromQString(const QString & str, std::string & result)  { result = str.toStdString(); }
+      static inline QString toQString(const std::string & str)                   { return QString::fromAscii(str.data(), str.size()); }
+      static inline void fromQString(const QString & str, std::string & result)  { result = str.toLatin1().constData(); }
    };
 
    template <int dummy>
    struct cvtQString<true, dummy>
    {
       static inline QString toQString(const std::wstring & str)                     { return QString::fromStdWString(str); }
-      static inline void fromQString(const QString & str, std::wstring & result)    { result = str.toStdWString(); }
+      static inline void fromQString(const QString & str, std::wstring & result)    { result = std::wstring(); /*HACK*/ }
    };
 
    template <bool isWide /* = false */, int dummy>
@@ -138,7 +138,7 @@ private:
       static inline QByteArray toQByteArray(const std::wstring & str, std::wstring * owner)
       { Q_UNUSED(owner); return QString::fromStdWString(str).toUtf8(); }
       static inline void fromQByteArray(const QByteArray & data, std::wstring & result)
-      { result = QString::fromUtf8(data.constData(), data.size()).toStdWString(); }
+      { result = std::wstring(); /*HACK*/ }
    };
 
 };
diff --git inl/QxCommon/QxStringCvt_FromString.inl inl/QxCommon/QxStringCvt_FromString.inl
index f420de5..e04dc0c 100644
--- inl/QxCommon/QxStringCvt_FromString.inl
+++ inl/QxCommon/QxStringCvt_FromString.inl
@@ -135,7 +135,7 @@ static inline qx_bool fromString(const QString & s, std::string & t, const QStri
 
 template <> struct QxStringCvt_FromString< std::wstring > {
 static inline qx_bool fromString(const QString & s, std::wstring & t, const QString & format, int index)
-{ Q_UNUSED(format); Q_UNUSED(index); t = s.toStdWString(); return qx_bool(true); } };
+{ Q_UNUSED(format); Q_UNUSED(index); t = std::wstring(); /*HACK*/ return qx_bool(true); } };
 
 template <typename T> struct QxStringCvt_FromString< boost::optional<T> > {
 static inline qx_bool fromString(const QString & s, boost::optional<T> & t, const QString & format, int index)
diff --git inl/QxCommon/QxStringCvt_FromVariant.inl inl/QxCommon/QxStringCvt_FromVariant.inl
index 83da3a0..ea16e1a 100644
--- inl/QxCommon/QxStringCvt_FromVariant.inl
+++ inl/QxCommon/QxStringCvt_FromVariant.inl
@@ -123,7 +123,7 @@ static inline qx_bool fromVariant(const QVariant & v, std::string & t, const QSt
 
 template <> struct QxStringCvt_FromVariant< std::wstring > {
 static inline qx_bool fromVariant(const QVariant & v, std::wstring & t, const QString & format, int index)
-{ Q_UNUSED(format); Q_UNUSED(index); t = v.toString().toStdWString(); return qx_bool(true); } };
+{ Q_UNUSED(format); Q_UNUSED(index); t = std::wstring(); /*HACK*/ return qx_bool(true); } };
 
 template <> struct QxStringCvt_FromVariant< qx_bool > {
 static inline qx_bool fromVariant(const QVariant & v, qx_bool & t, const QString & format, int index)
diff --git inl/QxCommon/QxStringCvt_ToString.inl inl/QxCommon/QxStringCvt_ToString.inl
index c0315ea..a8da15c 100644
--- inl/QxCommon/QxStringCvt_ToString.inl
+++ inl/QxCommon/QxStringCvt_ToString.inl
@@ -131,7 +131,7 @@ static inline QString toString(const qx::QxDateTimeNeutral & t, const QString &
 
 template <> struct QxStringCvt_ToString< std::string > {
 static inline QString toString(const std::string & t, const QString & format, int index)
-{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromStdString(t); } };
+{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromAscii(t.data(), t.size()); } };
 
 template <> struct QxStringCvt_ToString< std::wstring > {
 static inline QString toString(const std::wstring & t, const QString & format, int index)
diff --git inl/QxCommon/QxStringCvt_ToVariant.inl inl/QxCommon/QxStringCvt_ToVariant.inl
index 39ef440..d3f805a 100644
--- inl/QxCommon/QxStringCvt_ToVariant.inl
+++ inl/QxCommon/QxStringCvt_ToVariant.inl
@@ -83,11 +83,11 @@ static inline QVariant toVariant(const qx::QxDateTimeNeutral & t, const QString
 
 template <> struct QxStringCvt_ToVariant< std::string > {
 static inline QVariant toVariant(const std::string & t, const QString & format, int index)
-{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromStdString(t); } };
+{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromAscii(t.data(), t.size()); } };
 
 template <> struct QxStringCvt_ToVariant< std::wstring > {
 static inline QVariant toVariant(const std::wstring & t, const QString & format, int index)
-{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromStdWString(t); } };
+{ Q_UNUSED(format); Q_UNUSED(index); return QString::fromWCharArray(t.c_str()); } };
 
 template <> struct QxStringCvt_ToVariant< QVariant > {
 static inline QVariant toVariant(const QVariant & t, const QString & format, int index)